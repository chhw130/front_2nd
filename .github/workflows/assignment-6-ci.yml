name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize, reopened]

    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: tsc && build
        id: build
        run: |
          pnpm -F assignment-6 run build > build_output.log 2>&1 || true
          cat build_output.log

      - name: Comment PR
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const buildLog = fs.readFileSync('build_output.log', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Result for Assignment 6. Error log:\n\`\`\`\n${buildLog}\n\`\`\``
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: run lint
        run: pnpm -F assignment-6 run lint

      - name: Comment PR
      if: failure()
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.TOKEN_FOR_CI}}
        script: |
          const buildLog = process.env.BUILD_OUTPUT || 'No error log available';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Result for Assignment 6. Error log:\n\`\`\`\n${buildLog}\n\`\`\``
          })
      env:
        BUILD_OUTPUT: ${{ steps.build.outputs.build_output }}  



  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
