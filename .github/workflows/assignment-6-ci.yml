name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize, reopened]

    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: tsc && build
        id: build
        run: |
          pnpm -F assignment-6 build 2>&1 | tee error.log
          exit ${PIPESTATUS[0]}

      - name: Comment PR
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const errorLog = fs.readFileSync('error.log', 'utf8')

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorLog
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: lint
        id: lint
        run: |
          pnpm -F assignment-6 lint 2>&1 | tee error.log
          exit ${PIPESTATUS[0]}

      - name: Comment PR
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const errorLog = fs.readFileSync('error.log', 'utf8')

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorLog
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: run test
        run: pnpm -F assignment-6 run test

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run Lighthouse CI
        run: |
          pnpm i -g @lhci/cli
          pnpm -F assignment-6 lhci || echo "Fail to Run Lighthouse CI!"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Format lighthouse score
        id: forma
        uses: actions/github-script@v6.4.0
        env:
          WORKING_DIRECTORY: ${{ env.working-directory }}
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'lhci_reports', 'manifest.json');

            if (!fs.existsSync(resultsPath)) {
              console.log(`File not found: ${resultsPath}`);
              return;
            }

            const results = JSON.parse(fs.readFileSync(resultsPath));
            const totalReports = results.length;

            // best-practices은 문자열로 저장 ( Lighthouse 지표 )
            const averageScores = {
              performance: 0,
              accessibility: 0,
              'best-practices': 0,
              seo: 0,
              pwa: 0
            };

            // Lighthouse 상세 지표
            const auditSummaries = {
              'first-contentful-paint': 0,
              'largest-contentful-paint': 0,
              'interactive': 0,
              'total-blocking-time': 0,
              'cumulative-layout-shift': 0
            };

            // 점수 평균
            results.forEach(result => {
              const { summary } = result;
              for (const key in averageScores) {
                averageScores[key] += summary[key];
              }

              const details = JSON.parse(fs.readFileSync(result.jsonPath));
              ['first-contentful-paint', 'largest-contentful-paint', 'interactive', 'total-blocking-time', 'cumulative-layout-shift'].forEach(auditName => {
                if (details.audits[auditName]) {
                  const auditDetails = details.audits[auditName];
                  auditSummaries[auditName] += parseFloat(auditDetails.displayValue) || 0;
                }
              });
            });

            // (나머지 코드는 그대로 유지)

            // PR 전송
            if (comments && context.issue.number) {
              const issue_number = context.issue.number;
              const repo = context.repo.repo;
              const owner = context.repo.owner;
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: comments
              });
            } else {
              console.log("No PR COMMENT!");
            }

      - name: comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments}}

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
